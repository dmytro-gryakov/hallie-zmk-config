#undef ZMK_BEHAVIORS_KEEP_ALL

#define ZMK_BEHAVIORS_KEEP_IND
#define ZMK_BEHAVIORS_KEEP_BT
#define ZMK_BEHAVIORS_KEEP_GRESC
#define ZMK_BEHAVIORS_KEEP_SYS_RESET
#define ZMK_BEHAVIORS_KEEP_BOOTLOADER
#define ZMK_BEHAVIORS_KEEP_CAPS_WORD
#define ZMK_BEHAVIORS_KEEP_KEY_REPEAT
#define ZMK_BEHAVIORS_KEEP_KT
#define ZMK_BEHAVIORS_KEEP_LT
#define ZMK_BEHAVIORS_KEEP_MT
#define ZMK_BEHAVIORS_KEEP_SK
#define ZMK_BEHAVIORS_KEEP_STICKY_LAYER
#define ZMK_BEHAVIORS_KEEP_TO
#define ZMK_BEHAVIORS_KEEP_TOG
#define ZMK_BEHAVIORS_KEEP_TRANS

#include <dt-bindings/zmk/indicators.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    macros {
        arrow_fn: arrow_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "ARROW_FN";
        };

        null_conditional_operator: null_conditional_operator {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QUESTION &kp KP_DOT>;
            label = "NULL_CONDITIONAL_OPERATOR";
        };

        switch_lang_go_ukr_layer: switch_lang_go_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(NUMBER_2))>, <&macro_wait_time 100>, <&tog 6>;

            label = "SWITCH_LANG_GO_LAYER";
        };

        switch_lang_go_def_layer: switch_lang_go_def_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(NUMBER_1))>, <&macro_wait_time 100>, <&tog 6>;

            label = "SWITCH_LANG_GO_DEF_LAYER";
        };
    };

    combos {
        compatible = "zmk,combos";

        go_to_ukr {
            bindings = <&switch_lang_go_ukr_layer>;
            key-positions = <9 8>;
            layers = <0>;
        };

        cancel_ukr_layer {
            bindings = <&switch_lang_go_def_layer>;
            key-positions = <9 8>;
            layers = <6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LEFT_GUI ESCAPE  &kp Q  &kp W           &kp E        &kp R             &kp T        &kp Y        &kp U              &kp I        &kp O            &kp P      &kp LEFT_BRACKET
&kp TAB              &kp A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G        &kp H        &mt RIGHT_SHIFT J  &mt RCTRL K  &mt RIGHT_ALT L  &kp SEMI   &kp SQT
&kp LEFT_SHIFT       &kp Z  &kp X           &kp C        &kp V             &kp B        &kp N        &kp M              &kp COMMA    &kp DOT          &kp SLASH  &kp RIGHT_BRACKET
                                            &mo 3        &lt 1 DELETE      &kp SPACE    &lt 5 ENTER  &lt 4 BACKSPACE    &mo 2
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &scroll_u_d>;
        };

        nums_layer {
            bindings = <
&none      &none  &kp F12  &kp F11  &kp F10  &kp F9       &none      &kp N7  &kp N8  &kp N9  &kp KP_MULTIPLY  &kp KP_DIVIDE
&kp TAB    &none  &kp F5   &kp F6   &kp F7   &kp F8       &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp KP_PLUS      &kp KP_MINUS
&kp LSHFT  &none  &kp F4   &kp F3   &kp F2   &kp F1       &kp N0     &kp N1  &kp N2  &kp N3  &kp KP_COMMA     &kp DOT
                           &none    &trans   &kp SPACE    &kp ENTER  &trans  &none
            >;

            sensor-bindings = <&inc_dec_kp PG_DN PG_UP &scroll_l_r>;
        };

        nav_layer {
            bindings = <
&none  &none    &none      &none        &none           &none        &none      &none     &none     &none      &none    &none
&none  &kp INS  &kp PSCRN  &kp K_CMENU  &kp LCTRL       &none        &kp PG_UP  &kp HOME  &kp UP    &kp END    &none    &none
&none  &none    &none      &none        &none           &none        &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp DEL  &kp BSPC
                           &none        &kp LEFT_SHIFT  &kp SPACE    &kp ENTER  &none     &none
            >;

            sensor-bindings = <&inc_dec_kp DOWN_ARROW UP_ARROW &inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        adjust_layer {
            bindings = <
&out OUT_BLE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_CLR   &out OUT_USB    &none        &none        &none  &none  &none  &none
&none         &none         &none         &none           &none        &none           &none        &none        &none  &none  &none  &none
&sys_reset    &bootloader   &none         &studio_unlock  &ind IND_ON  &ind BAT_ST     &ind IND_ON  &ind BAT_ST  &none  &none  &none  &none
                                          &mo 3           &mo 1        &kp SPACE       &kp ENTER    &mo 1        &mo 2
            >;

            sensor-bindings = <&inc_dec_kp DOWN_ARROW UP_ARROW &inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        symbs_layer {
            bindings = <
&trans  &trans           &kp LESS_THAN  &kp GREATER_THAN            &kp UNDERSCORE  &kp HASH      &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT   &trans     &trans
&trans  &kp EXCLAMATION  &kp MINUS      &kp PLUS                    &kp EQUAL       &kp KP_DOT    &kp PIPE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION  &kp GRAVE  &trans
&trans  &trans           &kp SLASH      &kp ASTERISK                &kp BACKSLASH   &kp SEMI      &kp DOLLAR     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN   &trans     &trans
                                        &null_conditional_operator  &arrow_fn       &trans        &trans         &trans                &trans
            >;
        };

        hotkeys_layer {
            bindings = <
&trans          &trans  &trans  &trans               &trans  &kp LC(LS(T))    &kp LC(KP_PLUS)     &kp LC(KP_MINUS)  &kp LG(LA(K))  &trans  &trans  &trans
&trans          &trans  &trans  &trans               &trans  &trans           &kp LC(LS(SLASH))   &kp LC(SLASH)     &trans         &trans  &trans  &trans
&kp LEFT_SHIFT  &trans  &trans  &kp C_AL_CALCULATOR  &trans  &trans           &kp LA(LEFT_SHIFT)  &trans            &trans         &trans  &trans  &trans
                                &trans               &trans  &trans           &trans              &trans            &trans
            >;
        };

        ukr_layer {
            bindings = <
&mt LEFT_GUI ESCAPE  &kp Q  &kp W           &kp E        &kp R             &kp T        &kp Y        &kp U              &kp I        &kp O            &kp P      &kp LEFT_BRACKET
&kp TAB              &kp A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G        &kp H        &mt RIGHT_SHIFT J  &mt RCTRL K  &mt RIGHT_ALT L  &kp SEMI   &kp SQT
&kp LEFT_SHIFT       &kp Z  &kp X           &kp C        &kp V             &kp B        &kp N        &kp M              &kp COMMA    &kp DOT          &kp SLASH  &kp RIGHT_BRACKET
                                            &mo 3        &lt 1 DELETE      &kp SPACE    &lt 5 ENTER  &lt 4 BACKSPACE    &mo 2
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>, <&scroll_u_d>;
        };

        extra3 { status = "reserved"; };

        extra4 { status = "reserved"; };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
